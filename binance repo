# ─────────────────────────────────────────────────────────────────────────────
# README.md (özet)
# ─────────────────────────────────────────────────────────────────────────────
# Bu repo, Render üzerinde çalışan hafif bir **Python FastAPI + WebSocket tüketici**
# servistir. Binance Spot/Futures gerçek zamanlı verisini çeker, opsiyonel olarak
# bir **n8n Webhook**'una POST eder ve bir sağlık kontrolü (health) endpoint’i sunar.
#
# Özellikler
# - WebSocket ile gerçek zamanlı akış (aggTrade / trade / depth / kline_* kanalları)
# - Otomatik reconnect + backoff
# - n8n Webhook’a JSON forward (opsiyonel)
# - Health endpoint: /healthz
# - Dockerfile + render.yaml ile tek tık dağıtım
#
# Hızlı Başlangıç (Render)
# 1) Bu kodu GitHub’a bir repo olarak yükle.
# 2) Render → New → Web Service → “Build & deploy from a Git repository”
# 3) Environment: Docker
# 4) Environment Variables:
#    - SYMBOLS=BTCUSDT,ETHUSDT  (virgülle birden çok)
#    - STREAM=aggTrade           (örnek: aggTrade | trade | kline_1s | depth@100ms)
#    - N8N_WEBHOOK_URL=https://<n8n-domain>/webhook/binance (opsiyonel)
#    - WS_URL=wss://stream.binance.com:9443/stream
#    - LOG_LEVEL=INFO
# 5) Deploy → Logs’ta akışı gör. n8n varsa, akışlar webhook’a düşer.
#
# Lokal çalıştırma
# docker build -t binance-ws:dev .
# docker run --rm -p 8080:8080 \
#   -e SYMBOLS=BTCUSDT -e STREAM=aggTrade -e LOG_LEVEL=DEBUG \
#   binance-ws:dev
#
# Notlar
# - User Data Stream (özel hesap verisi) kullanmıyoruz; yalnızca piyasa verisi (public).
# - İleri aşamada Redis/Postgres kaydı ve risk motoru eklenecek (MVP dışı).


# ─────────────────────────────────────────────────────────────────────────────
# app/config.py
# ─────────────────────────────────────────────────────────────────────────────
import os

class Settings:
    PORT: int = int(os.getenv("PORT", 8080))
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
    SYMBOLS: list[str] = [s.strip() for s in os.getenv("SYMBOLS", "BTCUSDT").split(",") if s.strip()]
    STREAM: str = os.getenv("STREAM", "aggTrade")  # aggTrade | trade | kline_1s | depth@100ms
    WS_URL: str = os.getenv("WS_URL", "wss://stream.binance.com:9443/stream")
    N8N_WEBHOOK_URL: str | None = os.getenv("N8N_WEBHOOK_URL")
    BACKOFF_BASE: float = float(os.getenv("BACKOFF_BASE", 1.0))
    BACKOFF_MAX: float = float(os.getenv("BACKOFF_MAX", 30.0))

settings = Settings()


# ─────────────────────────────────────────────────────────────────────────────
# app/logger.py
# ─────────────────────────────────────────────────────────────────────────────
import logging
from .config import settings

logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s – %(message)s",
)
logger = logging.getLogger("binance-ws")


# ─────────────────────────────────────────────────────────────────────────────
# app/binance_ws.py
# ─────────────────────────────────────────────────────────────────────────────
import asyncio
import json
import time
import aiohttp
import websockets
from websockets import ConnectionClosedError, WebSocketException
from .config import settings
from .logger import logger

class BinanceWSClient:
    def __init__(self):
        self.ws_url = settings.WS_URL
        self.stream = settings.STREAM
        self.symbols = [s.lower() for s in settings.SYMBOLS]
        self.n8n_url = settings.N8N_WEBHOOK_URL
        self._running = False

    def _build_params(self):
        # Çoklu stream: streamName@stream/streamName2@stream
        # Örn: btcusdt@aggTrade/ethusdt@aggTrade
        streams = [f"{sym}@{self.stream}" for sym in self.symbols]
        return "/".join(streams)

    async def _forward_n8n(self, payload: dict):
        if not self.n8n_url:
            return
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as sess:
                async with sess.post(self.n8n_url, json=payload) as resp:
                    if resp.status >= 300:
                        text = await resp.text()
                        logger.warning("n8n forward non-200: %s %s", resp.status, text)
        except Exception as e:
            logger.exception("n8n forward error: %s", e)

    async def _consume(self):
        params = self._build_params()
        url = f"{self.ws_url}?streams={params}"
        logger.info("Connecting WS: %s", url)
        async with websockets.connect(url, ping_interval=20, ping_timeout=20, max_queue=2048) as ws:
            async for raw in ws:
                try:
                    msg = json.loads(raw)
                except json.JSONDecodeError:
                    logger.debug("Non-JSON frame: %s", raw[:200])
                    continue

                # Binance çoklu stream formatı: {"stream": "btcusdt@aggTrade", "data": {...}}
                data = msg.get("data") or msg
                if not isinstance(data, dict):
                    continue

                await self._forward_n8n(data)

    async def run(self):
        self._running = True
        attempt = 0
        while self._running:
            try:
                await self._consume()
                attempt = 0  # başarılı akışta sıfırla
            except (ConnectionClosedError, WebSocketException, OSError) as e:
                attempt += 1
                backoff = min(settings.BACKOFF_BASE * (2 ** (attempt - 1)), settings.BACKOFF_MAX)
                logger.warning("WS disconnected (%s). Reconnecting in %.1fs", e.__class__.__name__, backoff)
                await asyncio.sleep(backoff)
            except Exception as e:
                logger.exception("WS fatal error: %s", e)
                await asyncio.sleep(2)

    async def stop(self):
        self._running = False


# ─────────────────────────────────────────────────────────────────────────────
# app/main.py
# ─────────────────────────────────────────────────────────────────────────────
import asyncio
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from .binance_ws import BinanceWSClient
from .config import settings
from .logger import logger

app = FastAPI(title="Binance WS Relay")
client = BinanceWSClient()

@app.on_event("startup")
async def _startup():
    logger.info("Starting Binance WS consumer… symbols=%s stream=%s", settings.SYMBOLS, settings.STREAM)
    app.state.task = asyncio.create_task(client.run())

@app.on_event("shutdown")
async def _shutdown():
    logger.info("Shutting down…")
    await client.stop()
    task = getattr(app.state, "task", None)
    if task:
        task.cancel()

@app.get("/healthz")
async def healthz():
    return JSONResponse({"ok": True, "symbols": settings.SYMBOLS, "stream": settings.STREAM})


# ─────────────────────────────────────────────────────────────────────────────
# requirements.txt
# ─────────────────────────────────────────────────────────────────────────────
fastapi==0.115.0
uvicorn==0.30.6
websockets==12.0
aiohttp==3.10.5


# ─────────────────────────────────────────────────────────────────────────────
# Dockerfile
# ─────────────────────────────────────────────────────────────────────────────
# Çok küçük imaj için Python slim
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# Sistem paketleri (gerekli en az set)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates curl && \
    rm -rf /var/lib/apt/lists/*

COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY app ./app

EXPOSE 8080
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]


# ─────────────────────────────────────────────────────────────────────────────
# render.yaml (opsiyonel – Render autodiscover edebilir)
# ─────────────────────────────────────────────────────────────────────────────
# services:
# - type: web
#   name: binance-ws-relay
#   env: docker
#   plan: starter  # ihtiyaca göre değiştirin
#   autoDeploy: true
#   healthCheckPath: /healthz
#   envVars:
#   - key: SYMBOLS
#     value: BTCUSDT,ETHUSDT
#   - key: STREAM
#     value: aggTrade
#   - key: WS_URL
#     value: wss://stream.binance.com:9443/stream
#   - key: LOG_LEVEL
#     value: INFO
#   - key: N8N_WEBHOOK_URL
#     sync: false  # Render’da Secret olarak eklemenizi öneririz


# ─────────────────────────────────────────────────────────────────────────────
# n8n – örnek webhook şeması (belge notu)
# ─────────────────────────────────────────────────────────────────────────────
# n8n’de HTTP Request → Webhook (POST) ile bir endpoint oluşturun:
#   https://<n8n-domain>/webhook/binance
# Body tipini JSON seçin. Örnek gelen payload (aggTrade):
# {
#   "e":"aggTrade",
#   "E":1699999999999,
#   "s":"BTCUSDT",
#   "a":123456789,
#   "p":"61750.12",
#   "q":"0.001",
#   "T":1699999999999,
#   "m":false,
#   "M":true
# }
# Buradan IF/Function nodeları ile sinyal işleme, kayıt veya alarm akışlarını kurabilirsiniz.
